def pomConfig = {
  //noinspection UnnecessaryQualifiedReference
  resolveStrategy = Closure.DELEGATE_FIRST
  name POM_ARTIFACT_ID
  description POM_DESCRIPTION
  url POM_URL

  issueManagement {
    system POM_ISSUE_SYSTEM
    url POM_ISSUE_URL
  }

  scm {
    url POM_SCM_URL
    connection POM_SCM_CONNECTION
    developerConnection POM_SCM_DEV_CONNECTION
  }

  licenses {
    license {
      name POM_LICENCE_NAME
      url POM_LICENCE_URL
      distribution POM_LICENCE_DIST
    }
  }

  developers {
    developer {
      id POM_DEVELOPER_ID
      name POM_DEVELOPER_NAME
      email POM_DEVELOPER_EMAIL
    }
  }
}


task groovydocJar(type: Jar, dependsOn: groovydoc) {
  group = 'Publications'
  description = 'Create javadoc jar of Groovy documentation.'
  archiveClassifier = 'groovydoc'
  from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  group = 'Publications'
  description = 'Create jar of the sources.'
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

task testsJar(type: Jar) {
  group = 'Publications'
  description = 'Create jar of all tests.'
  archiveClassifier = 'tests'
  from sourceSets.test.output
}

task reportsZip(type: Zip, dependsOn: check) {
  group = 'Publications'
  description = 'Create a zip of all reports.'
  archiveClassifier = 'reports'
  from reporting.baseDir
}

// Local published to ~/.m2 - mavenLocal()
publishing {
  repositories {
    mavenLocal()
  }

  publications {
    maven(MavenPublication) {
      from components.java // includes main 'artifact jar'
      artifact groovydocJar
      artifact sourcesJar
      artifact testsJar
      artifact reportsZip

      groupId GROUP
      artifactId POM_ARTIFACT_ID
      version VERSION_NAME

      pom.withXml {
        // Add parent POM information
        asNode().children().first() + pomConfig
      }
    }
  }
}
publish.dependsOn jar, groovydocJar, sourcesJar, testsJar, reportsZip
publish.dependsOn 'generatePomFileForMavenPublication'

// Snapshots published to JFrog Artifactory repository
artifactory {
  contextUrl = 'https://oss.jfrog.org'

  publish {
    repository {
      repoKey = 'oss-snapshot-local'
      username = project.properties['BINTRAY_USERNAME'] ?: System.getenv('BINTRAY_USERNAME')
      password = project.properties['BINTRAY_API_KEY'] ?: System.getenv('BINTRAY_API_KEY')
    }

    defaults {
      publications 'maven'
    }
  }

  resolve {
    repository {
      repoKey = 'libs-release'
    }
  }
}
artifactoryPublish.dependsOn jar, groovydocJar, sourcesJar, testsJar, reportsZip
artifactoryPublish.dependsOn 'generatePomFileForMavenPublication'

// Publishes to JFrog Bintray's JCenter repository
bintray {
  user = project.properties['BINTRAY_USERNAME'] ?: System.getenv('BINTRAY_USERNAME')
  key = project.properties['BINTRAY_API_KEY'] ?: System.getenv('BINTRAY_API_KEY')
  publications = ['maven']
  publish = true

  pkg {
    repo = 'maven'
    name = POM_ARTIFACT_ID
    desc = POM_DESCRIPTION
    websiteUrl = POM_URL
    issueTrackerUrl = POM_ISSUE_URL
    vcsUrl = POM_URL
    labels = ['gradle', 'plugin', 'license']
    githubRepo = BINTRAY_GITHUB_REPO
    githubReleaseNotesFile = 'README.md'

    version {
      name = VERSION_NAME
      desc = POM_DESCRIPTION
      released = new Date()
      vcsTag = VERSION_NAME

      mavenCentralSync {
        sync = false
        user = project.properties['SONATYPE_USERNAME'] ?: System.getenv('SONATYPE_USERNAME')
        password = project.properties['SONATYPE_PASSWORD'] ?: System.getenv('SONATYPE_PASSWORD')
        close = '1'
      }
    }
  }
}
bintrayUpload.dependsOn jar, groovydocJar, sourcesJar, testsJar, reportsZip
bintrayUpload.dependsOn 'generatePomFileForMavenPublication'

// Publishes to JFrog Bintray's JCenter repository
pluginBundle {
  website = POM_URL
  vcsUrl = POM_URL
  description = POM_DESCRIPTION
  tags = bintray.pkg.labels

  plugins {
    licensePlugin {
      displayName = POM_NAME
    }
  }
}
publishPlugins.dependsOn jar, groovydocJar, sourcesJar, testsJar, reportsZip
publishPlugins.dependsOn 'generatePomFileForMavenPublication'

// Publish to both Bintray and Gradle repositories
task release(dependsOn: [bintrayUpload, publishPlugins]) {
  group = 'Publishing'
  description = 'Publish to JFrog Jcenter\'s Brintray and Gradle Plugins Repositories.'
}
