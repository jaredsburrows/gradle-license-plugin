def isReleaseBuild() {
  return !VERSION_NAME.contains('SNAPSHOT')
}

task docsJar(type: Jar, dependsOn: dokkaHtml) {
  group = 'Publications'
  description = 'Create jar of documentation.'
  archiveClassifier = 'docs'
  from dokkaJavadoc.outputDirectory
}

task sourcesJar(type: Jar, dependsOn: classes) {
  group = 'Publications'
  description = 'Create jar of sources.'
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

task testsJar(type: Jar) {
  group = 'Publications'
  description = 'Create jar of tests.'
  archiveClassifier = 'tests'
  from sourceSets.test.output
}

task reportsZip(type: Zip, dependsOn: check) {
  group = 'Publications'
  description = 'Create a zip of all reports.'
  archiveClassifier = 'reports'
  from reporting.baseDir
}

publishing {
  repositories {
    mavenLocal()

    maven {
      credentials {
        username project.properties['SONATYPE_USERNAME'] ?: System.getenv('SONATYPE_USERNAME')
        password project.properties['SONATYPE_PASSWORD'] ?: System.getenv('SONATYPE_PASSWORD')
      }

      if (isReleaseBuild()) {
        url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      } else {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
      }
    }
  }

  publications {
    maven(MavenPublication) {
      from components.java // includes main 'artifact jar'
      artifact docsJar
      artifact sourcesJar
      artifact testsJar
      artifact reportsZip

      groupId GROUP
      artifactId POM_ARTIFACT_ID
      version VERSION_NAME

      pom {
        name = POM_ARTIFACT_ID
        packaging = POM_PACKAGING
        description = POM_DESCRIPTION
        url = POM_URL
        inceptionYear = POM_INCEPTION_YEAR

        licenses {
          license {
            name = POM_LICENCE_NAME
            url = POM_LICENCE_URL
            distribution = POM_LICENCE_DIST
          }
        }

        developers {
          developer {
            id = POM_DEVELOPER_ID
            name = POM_DEVELOPER_NAME
            email = POM_DEVELOPER_EMAIL
          }
        }

        scm {
          url = POM_SCM_URL
          connection = POM_SCM_CONNECTION
          developerConnection = POM_SCM_DEV_CONNECTION
        }

        issueManagement {
          system = POM_ISSUE_SYSTEM
          url = POM_ISSUE_URL
        }
      }
    }
  }
}

signing {
  required { isReleaseBuild() && gradle.taskGraph.hasTask("release") }
  sign publishing.publications.maven
}

// Publishes to Gradle plugins repository
gradlePlugin {
  plugins {
    licensePlugin {
      id = PLUGIN_NAME
      implementationClass = PLUGIN_NAME_CLASS
    }
  }
}
pluginBundle {
  website = POM_URL
  vcsUrl = POM_URL
  description = POM_DESCRIPTION

  plugins {
    licensePlugin {
      displayName = POM_NAME
    }
  }
}

// Publish to both Maven Central and Gradle repositories
task release(dependsOn: [publishMavenPublicationToMavenRepository, publishPlugins]) {
  group = 'Publishing'
  description = 'Publish to Maven Central and Gradle Plugins Repositories.'
}
