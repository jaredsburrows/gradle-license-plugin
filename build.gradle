import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
  id 'org.jetbrains.kotlin.jvm' version '1.6.21'
  id 'org.jetbrains.dokka' version '1.6.20'
  id 'org.jlleitschuh.gradle.ktlint' version '10.2.1'
  id 'com.vanniktech.maven.publish' version '0.19.0'
  id 'com.gradle.plugin-publish' version '0.21.0'
  id 'com.github.ben-manes.versions' version '0.42.0'
  id 'java-gradle-plugin'
  id 'java-library'
  id 'groovy'
}

repositories {
  mavenCentral()
  google()
}

apply from: 'gradle/dependencies.gradle'

group = GROUP
version = VERSION_NAME
description = POM_DESCRIPTION

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

configurations.configureEach {
  resolutionStrategy {
    eachDependency { details ->
      if (details.requested.group == 'org.jetbrains.kotlin') {
        details.useVersion versions.kotlin
      }
    }
  }
}

task createClasspathManifest() {
  def outputDir = new File(buildDir, name)

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    // Combine both main and test plugin classpaths
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join('\n') +
      '\n' + sourceSets.test.runtimeClasspath.join('\n')
  }
}

dependencies {
  compileOnly gradleApi()
  compileOnly deps.android.tools.build.gradle

  implementation deps.kotlin.stdlib.jdk
  implementation deps.kotlinx.html
  implementation deps.gson
  implementation deps.maven

  testRuntimeOnly files(createClasspathManifest)
  testRuntimeOnly deps.android.tools.build.gradle

  testImplementation localGroovy()
  testImplementation gradleTestKit()
  testImplementation deps.spock, { exclude module: 'groovy-all' } // Use localGroovy()
  testImplementation deps.xmlunit.matchers
  testImplementation deps.commons.csv
}

gradlePlugin {
  plugins {
    licensePlugin {
      id = PLUGIN_NAME
      implementationClass = PLUGIN_NAME_CLASS
    }
  }
}

tasks.withType(Jar).configureEach {
  def dateFile = new File(buildDir, 'jar-manifest-date.txt')
  if (!dateFile.exists()) {
    def date = DateTimeFormatter.ofPattern('EEE MMM dd HH:mm:ss zzz yyyy').
      format(ZonedDateTime.now())
    dateFile.parentFile.mkdirs()
    dateFile.text = date.trim()
  }

  manifest {
    attributes(
      'Created-By': POM_DEVELOPER_NAME,
      'Implementation-Title': POM_NAME,
      'Implementation-Version': VERSION_NAME,
      'Implementation-Vendor': POM_DEVELOPER_NAME,
      'Built-By': System.getProperty('user.name'),
      'Built-Date': dateFile.text.trim(),
      'Built-JDK': System.getProperty('java.version'),
      'Built-Gradle': gradle.gradleVersion)
  }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_1_8
  }
}

tasks.withType(JavaCompile).configureEach {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  configure(options) {
    compilerArgs << '-Xlint:all'
    compilerArgs << '-Xlint:-options'
    encoding = 'utf-8'
    fork = true
  }
}

tasks.withType(GroovyCompile).configureEach {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  configure(options) {
    compilerArgs << '-Xlint:all'
    compilerArgs << '-Xlint:-options'
    encoding = 'utf-8'
    fork = true
  }
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  testLogging {
    exceptionFormat 'full'
    showCauses true
    showExceptions true
    showStackTraces true
    events 'failed', 'skipped'
  }

  def maxWorkerCount = gradle.startParameter.maxWorkerCount
  maxParallelForks = (maxWorkerCount < 2) ? 1 : maxWorkerCount / 2
}
