plugins {
  id 'org.jetbrains.kotlin.jvm' version '1.5.30'
  id 'org.jetbrains.dokka' version '1.5.0'
  id 'com.gradle.plugin-publish' version '0.15.0'
  id 'org.jlleitschuh.gradle.ktlint' version '10.2.0'
  id 'com.github.ben-manes.versions' version '0.39.0'
  id 'groovy'
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'signing'
}

repositories {
  mavenCentral()
  google()
}

apply from: 'gradle/dependencies.gradle'

group = GROUP
version = VERSION_NAME
description = POM_DESCRIPTION

sourceCompatibility = versions.java
targetCompatibility = versions.java

jar {
  manifest {
    attributes(
      'Implementation-Title': POM_NAME,
      'Implementation-Version': archiveVersion,
      'Built-By': System.getProperty('user.name'),
      'Built-Date': new Date(),
      'Built-JDK': System.getProperty('java.version'),
      'Built-Gradle': gradle.gradleVersion)
  }
}

task createClasspathManifest() {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    // Combine both main and test plugin classpaths
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join('\n') + '\n' + sourceSets.test.runtimeClasspath.join('\n')
  }
}

configurations.configureEach {
  resolutionStrategy {
    eachDependency { details ->
      if (details.requested.group == 'org.jetbrains.kotlin') {
        details.useVersion versions.kotlin
      }
    }
  }
}

dependencies {
  implementation deps.kotlin.stdlib.jdk
  implementation deps.kotlinx.html
  implementation deps.gson
  implementation deps.android.tools.build.gradle

  testRuntimeOnly files(createClasspathManifest)

  testImplementation localGroovy()
  testImplementation deps.spock, { exclude module: 'groovy-all' } // Use localGroovy()
  testImplementation deps.xmlunit.matchers
  testImplementation deps.commons.csv
}

apply from: 'gradle/publish.gradle'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
  kotlinOptions {
    jvmTarget = rootProject.versions.java
  }
}

tasks.withType(JavaCompile).configureEach {
  sourceCompatibility = rootProject.versions.java
  targetCompatibility = rootProject.versions.java

  // Show all warnings except boot classpath
  configure(options) {
    compilerArgs << '-Xlint:all'            // Turn on all warnings
    compilerArgs << '-Werror'               // Turn warnings into errors
    encoding = 'utf-8'
  }
}

tasks.withType(GroovyCompile).configureEach {
  sourceCompatibility = rootProject.versions.java
  targetCompatibility = rootProject.versions.java

  // Show all warnings except boot classpath
  configure(options) {
    compilerArgs << '-Xlint:all'            // Turn on all warnings
    compilerArgs << '-Werror'               // Turn warnings into errors
    encoding = 'utf-8'
  }
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()

  // Turn on logging for all tests, filter to show failures/skips only
  testLogging {
    exceptionFormat 'full'
    showCauses true
    showExceptions true
    showStackTraces true
    events 'failed', 'skipped'
  }
}

