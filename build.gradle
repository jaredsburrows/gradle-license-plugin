plugins {
  id 'com.gradle.build-scan' version '1.16'
  id 'com.jfrog.artifactory' version '4.8.1'
  id 'com.jfrog.bintray' version '1.8.4'
  id 'com.github.ben-manes.versions' version '0.20.0'
  id 'com.gradle.plugin-publish' version '0.10.0'
  id 'java-gradle-plugin'
  id 'groovy'
  id 'maven-publish'
}

repositories {
  jcenter()
  google()
}

apply from: 'gradle/dependencies.gradle'

group = GROUP
version = VERSION_NAME
description = POM_DESCRIPTION

sourceCompatibility = versions.java
targetCompatibility = versions.java

jar {
  manifest {
    attributes(
      'Implementation-Title': POM_NAME,
      'Implementation-Version': version,
      'Built-By': System.getProperty('user.name'),
      'Built-Date': new Date(),
      'Built-JDK': System.getProperty('java.version'),
      'Built-Gradle': gradle.gradleVersion)
  }
}

task createClasspathManifest() {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    // Combine both main and test plugin classpaths
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join('\n') + '\n' + sourceSets.test.runtimeClasspath.join('\n')
  }
}

dependencies {
  implementation localGroovy()

  compileOnly deps.android.tools.build.gradle

  testRuntimeOnly files(createClasspathManifest)

  testImplementation deps.android.tools.build.gradle
  testImplementation deps.spock, { exclude module: 'groovy-all' } // Use localGroovy()
}

apply from: 'gradle/scan.gradle'
apply from: 'gradle/compile.gradle'
apply from: 'gradle/plugin.gradle'
apply from: 'gradle/publish.gradle'
