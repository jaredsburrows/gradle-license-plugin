import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile

import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
  alias(libs.plugins.kotlin.jvm)
  alias(libs.plugins.dokka) apply false
  alias(libs.plugins.ktlint) apply false
  alias(libs.plugins.maven.publish) apply false
  alias(libs.plugins.plugin.publish) apply false
  alias(libs.plugins.versions)
  id 'java-gradle-plugin'
  id 'java-library'
  id 'groovy'
}

configurations.configureEach {
  resolutionStrategy {
    eachDependency { details ->
      if (details.requested.group == 'org.jetbrains.kotlin') {
        details.useVersion libs.versions.kotlin.get()
      }
    }
  }
}

subprojects {
  repositories {
    gradlePluginPortal()
    google()
    mavenCentral()
  }

  tasks.withType(Jar).configureEach {
    def dateFile = new File(buildDir, 'jar-manifest-date.txt')
    if (!dateFile.exists()) {
      def date = DateTimeFormatter.ofPattern('EEE MMM dd HH:mm:ss zzz yyyy').
        format(ZonedDateTime.now())
      dateFile.parentFile.mkdirs()
      dateFile.text = date.trim()
    }

    manifest {
      attributes(
        'Created-By': POM_DEVELOPER_NAME,
        'Implementation-Title': POM_NAME,
        'Implementation-Version': VERSION_NAME,
        'Implementation-Vendor': POM_DEVELOPER_NAME,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': dateFile.text.trim(),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion)
    }
  }

  tasks.withType(KotlinJvmCompile).configureEach {
    compilerOptions {
      jvmTarget.set(JvmTarget.JVM_11)
    }
  }

  tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    configure(options) {
      compilerArgs << '-Xlint:all'
      compilerArgs << '-Xlint:-options'
      encoding = 'utf-8'
      fork = true
    }
  }

  tasks.withType(GroovyCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    configure(options) {
      compilerArgs << '-Xlint:all'
      compilerArgs << '-Xlint:-options'
      encoding = 'utf-8'
      fork = true
    }
  }

  tasks.withType(Test).configureEach {
    useJUnitPlatform()

    testLogging {
      exceptionFormat 'full'
      showCauses true
      showExceptions true
      showStackTraces true
      events 'failed', 'skipped'
    }

    def maxWorkerCount = gradle.startParameter.maxWorkerCount
    maxParallelForks = (maxWorkerCount < 2) ? 1 : maxWorkerCount / 2
  }
}
